{"ast":null,"code":"var _jsxFileName = \"D:\\\\vs_code\\\\React_applications_learning\\\\i-notes\\\\src\\\\contexts\\\\CategoryState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport categoryContext from './CategoryContext';\nimport axios, { HttpStatusCode } from 'axios';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CategoryState = props => {\n  _s();\n  const initialCategory = [];\n  const [category, setCategory] = useState(initialCategory);\n  const getCategories = () => {\n    let config = {\n      headers: {\n        'Authorization': localStorage.getItem('tokenForValidation')\n      }\n    };\n    let url = 'http://localhost:9092/user/getCategories';\n    axios.get(url, config).then(response => {\n      if (response.status === HttpStatusCode.Ok) {\n        setCategory(response.data);\n      }\n    }).catch(error => {\n      if (error.response) {\n        Swal.fire({\n          title: \"Error !\",\n          icon: 'error',\n          text: `${error.response.data}`\n        });\n      } else {\n        Swal.fire(\"Something went wrong\", \"Please try again later\", 'error');\n      }\n    });\n  };\n  const deleteCategory = (id, setIsLoading) => {\n    const config = {\n      headers: {\n        'Authorization': localStorage.getItem('tokenForValidation')\n      }\n    };\n    let url = `http://localhost:9092/user/deleteCategory?id=${id}`;\n    axios.delete(url, config).then(res => {\n      if (res.status === HttpStatusCode.Ok) {\n        Swal.fire({\n          title: \"Success!\",\n          text: `Category deleted with id ${id}`,\n          icon: 'success'\n        });\n      }\n    }).catch(err => {\n      if (err.response) {\n        Swal.fire(`Failed`, `${err.response.data}`, `error`);\n      } else {\n        Swal.fire({\n          title: \"Error occured Try again!!!\",\n          icon: 'error'\n        });\n      }\n    }).finally(() => {\n      //here we are stoping the loading but we need to remove the card also.\n      //its not the correct way that after deleting we should refresh the notes : user/notes not \n      //to show the content instead of loading..\n      // will not set here..=>setIsLoading(()=>{return false})\n      //if we are not setting to false then the state is true ..so when rerendering next card shows\n      //loading so set state to false....\n      setIsLoading(() => {\n        return false;\n      });\n      let newCategory = category.filter(item => {\n        return item.id !== id;\n      });\n      setCategory(newCategory);\n      //getCategories()\n    });\n  };\n\n  const updateCategory = id => {\n    Swal.fire({\n      title: 'Enter the Category name to update',\n      input: 'text',\n      inputAttributes: {\n        autocapitalize: 'off'\n      },\n      showCancelButton: true,\n      confirmButtonText: 'Update',\n      showLoaderOnConfirm: true,\n      preConfirm: name => {\n        const config = {\n          headers: {\n            'Authorization': localStorage.getItem('tokenForValidation')\n          }\n        };\n        let url = `http://localhost:9092/user/updateCategory`;\n        let data = {\n          'name': name,\n          'id': id\n        };\n        return axios.put(url, data, config).then(res => {\n          if (res.status === HttpStatusCode.Ok) {\n            Swal.fire({\n              title: \"Success!\",\n              text: `Category name changed with ${name} for id ${id}`,\n              icon: 'success'\n            });\n            let newCategory = category.map(item => {\n              if (item.id === id) {\n                item.name = name;\n              }\n              return item;\n            });\n            setCategory(newCategory);\n          }\n        }).catch(err => {\n          if (err.response) {\n            Swal.showValidationMessage(`Failed : ${err.response.data}`);\n          } else {\n            Swal.showValidationMessage(\"Something went wrong!\");\n          }\n        });\n      },\n      allowOutsideClick: () => !Swal.isLoading()\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(categoryContext.Provider, {\n    value: {\n      category,\n      setCategory,\n      getCategories,\n      deleteCategory,\n      updateCategory\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n_s(CategoryState, \"ctW1RT1eIRjb6vjzZVq6bI6ct7Y=\");\n_c = CategoryState;\nexport default CategoryState;\nvar _c;\n$RefreshReg$(_c, \"CategoryState\");","map":{"version":3,"names":["React","useState","categoryContext","axios","HttpStatusCode","Swal","jsxDEV","_jsxDEV","CategoryState","props","_s","initialCategory","category","setCategory","getCategories","config","headers","localStorage","getItem","url","get","then","response","status","Ok","data","catch","error","fire","title","icon","text","deleteCategory","id","setIsLoading","delete","res","err","finally","newCategory","filter","item","updateCategory","input","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","showLoaderOnConfirm","preConfirm","name","put","map","showValidationMessage","allowOutsideClick","isLoading","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/vs_code/React_applications_learning/i-notes/src/contexts/CategoryState.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport categoryContext from './CategoryContext'\r\nimport axios, { HttpStatusCode } from 'axios'\r\nimport Swal from 'sweetalert2'\r\nconst CategoryState = (props) => {\r\n    const initialCategory = []\r\n    const [category, setCategory] = useState(initialCategory)\r\n    const getCategories = () => {\r\n        let config = {\r\n            headers: {\r\n                'Authorization': localStorage.getItem('tokenForValidation')\r\n            }\r\n        }\r\n        let url = 'http://localhost:9092/user/getCategories'\r\n        axios.get(url, config).then(response => {\r\n            if (response.status === HttpStatusCode.Ok) {\r\n                setCategory(response.data)\r\n            }\r\n        }).catch(error => {\r\n            if (error.response) {\r\n                Swal.fire({ title: \"Error !\", icon: 'error', text: `${error.response.data}` })\r\n            } else {\r\n                Swal.fire(\"Something went wrong\", \"Please try again later\", 'error');\r\n            }\r\n        })\r\n    }\r\n    const deleteCategory = (id, setIsLoading) => {\r\n        const config = {\r\n            headers: {\r\n                'Authorization': localStorage.getItem('tokenForValidation')\r\n            }\r\n        };\r\n        let url = `http://localhost:9092/user/deleteCategory?id=${id}`\r\n        axios.delete(url, config).then(res => {\r\n            if (res.status === HttpStatusCode.Ok) {\r\n                Swal.fire({ title: \"Success!\", text: `Category deleted with id ${id}`, icon: 'success' })\r\n            }\r\n        }).catch(err => {\r\n            if (err.response) {\r\n                Swal.fire(`Failed`, `${err.response.data}`, `error`)\r\n            } else {\r\n                Swal.fire({ title: \"Error occured Try again!!!\", icon: 'error' })\r\n            }\r\n        }).finally(() => {\r\n            //here we are stoping the loading but we need to remove the card also.\r\n            //its not the correct way that after deleting we should refresh the notes : user/notes not \r\n            //to show the content instead of loading..\r\n            // will not set here..=>setIsLoading(()=>{return false})\r\n            //if we are not setting to false then the state is true ..so when rerendering next card shows\r\n            //loading so set state to false....\r\n            setIsLoading(() => { return false })\r\n            let newCategory = category.filter((item) => { return item.id !== id })\r\n            setCategory(newCategory)\r\n            //getCategories()\r\n        })\r\n    }\r\n    const updateCategory = (id) => {\r\n        Swal.fire({\r\n            title: 'Enter the Category name to update',\r\n            input: 'text',\r\n            inputAttributes: {\r\n                autocapitalize: 'off'\r\n            },\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Update',\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: (name) => {\r\n                const config = {\r\n                    headers: {\r\n                        'Authorization': localStorage.getItem('tokenForValidation')\r\n                    }\r\n                };\r\n                let url = `http://localhost:9092/user/updateCategory`\r\n                let data = { 'name': name, 'id': id }\r\n                return axios.put(url, data, config).then(res => {\r\n                    if (res.status === HttpStatusCode.Ok) {\r\n                        Swal.fire({ title: \"Success!\", text: `Category name changed with ${name} for id ${id}`, icon: 'success' })\r\n                        let newCategory=category.map(item => {\r\n                            if (item.id === (id)) {\r\n                                item.name = name\r\n                            } return item;\r\n                        })\r\n                        setCategory(newCategory)\r\n                    }\r\n                }).catch(err => {\r\n                    if (err.response) {\r\n                        Swal.showValidationMessage(`Failed : ${err.response.data}`)\r\n                    } else {\r\n                        Swal.showValidationMessage(\"Something went wrong!\")\r\n                    }\r\n                })\r\n            },\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        })\r\n    }\r\n    return (\r\n        <categoryContext.Provider value={{ category, setCategory, getCategories, deleteCategory, updateCategory }}>\r\n            {props.children}\r\n        </categoryContext.Provider>\r\n    )\r\n}\r\n\r\nexport default CategoryState\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}